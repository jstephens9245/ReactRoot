{"version":3,"sources":["webpack:///./client/containers/NoteBoardContainer.js?b410"],"names":["styles","height","width","border","position","noteStyles","fontSize","noteTarget","drop","props","monitor","component","delta","getDifferenceFromInitialOffset","item","getItem","left","Math","round","x","top","y","snapToGrid","IndexToZIndex","notes","id","noteMover","collect","connector","connectDropTarget","dropTarget","isOver","NoteBoardContainer","boardUpdate","bind","participantMoveNote","socketConnect","addSocketListener","note","console","log","data","key","Object","keys","coordObj","coords","dispatch","Number","clearSocketListeners","socketDisconnect","deletedNotes","showNoteComments","content","notesDelete","movedNote","board","backgroundColor","map","renderNote","marginTop","index","color","replace","mapStateToProps","state","ownProps","noteReducer","all","filter","board_id","user","userReducer","loggedInUser","zIndexNotes","selectedBoard","mapDispatchToProps","socketEmit","addNoteToBoard"],"mappings":"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","file":"0.9f5ebb5e785952b1a9f1.hot-update.js","sourcesContent":["\n  import React, { Component } from 'react';\n  import {bindActionCreators, compose} from 'redux';\n  import {DropTarget} from 'react-dnd';\n  import {connect} from 'react-redux';\n  import { browserHistory } from 'react-router';\n  import MediaQuery from 'react-responsive';\n  import axios from 'axios';\n  import {NOTE} from '../constants';\n  import NoteWrapper from '../components/NoteWrapper';\n  import DraggableNote from '../components/DraggableNote';\n  import snapToGrid from '../components/snapToGrid';\n  import {deleteNotesFromDatabase, moveNote, participantMoveNote, addNoteToBoard, noteMover, IndexToZIndex, notesDelete} from '../actions/note';\n  import {setLoginUser} from '../actions/user';\n  import {\n    socketConnect,\n    socketEmit,\n    clearSocketListeners,\n    socketDisconnect,\n    addSocketListener\n  } from '../actions/socketio';\n  import store from '../store';\n  import flow from 'lodash/flow';\n  import isEmpty from 'lodash/isEmpty';\n  import {genShortHash} from '../utils/stringHash';\n  import TrashCan from '../components/NoteBoardTrashCan';\n\n  const styles = {\n    height  : '150vh',\n    width   : '100%',\n    border  : '1px black line',\n    position: 'relative',\n\n  };\n\n\n  const noteStyles = {\n    height  : '50px',\n    width   : '50px',\n    fontSize: '.5em',\n    position: 'relative',\n  };\n\n\n  const noteTarget = {\n    drop(props, monitor, component) {\n\n      const delta = monitor.getDifferenceFromInitialOffset();\n      const item = monitor.getItem();\n      if (delta === null) {\n        return;\n      } else {\n        let left = Math.round(item.left + delta.x);\n        let top = Math.round(item.top + delta.y);\n        if (props.snapToGrid) {\n          [ left, top ] = snapToGrid(left, top);\n        }\n        props.IndexToZIndex(props.notes, item.id);\n        props.noteMover(item.id, left, top);\n      // const newdata = {[item.id]: {left, top}};\n      }\n    },\n\n\n  };\n\n\n  const collect = (connector, monitor) => {\n\n    return {\n      connectDropTarget: connector.dropTarget(),\n      isOver           : monitor.isOver()\n    };\n  };\n\n\n  class NoteBoardContainer extends Component {\n    constructor(props) {\n      super(props);\n      this.boardUpdate = this.boardUpdate.bind(this);\n      this.participantMoveNote = this.participantMoveNote.bind(this);\n    }\n\n    componentWillMount() {\n      this.props.socketConnect('board');\n      this.props.addSocketListener('note', this.boardUpdate);\n      this.props.addSocketListener('moveNote', this.participantMoveNote);\n\n    }\n\n\n    boardUpdate(note) {\n      console.log('call board update');\n      // if (note.board_id === this.props.board.id) {\n      //   store.dispatch(addNoteToBoard(note));\n      // }\n    }\n\n    participantMoveNote(data) {\n      const key = Object.keys(data);\n      let left;\n      let top;\n      const coordObj = data[key];\n      for (const coords in coordObj) {\n        if (coords === 'left') {\n          left = coordObj[coords];\n        } else {\n          top = coordObj[coords];\n        }\n      }\n      store.dispatch(moveNote(Number(key[0]), left, top));\n    }\n\n\n    componentWillUnmount() {\n      this.props.clearSocketListeners();\n      this.props.socketDisconnect();\n      deleteNotesFromDatabase(this.props.deletedNotes);\n    }\n\n\n    renderNote(item, key) {\n      return (\n        <DraggableNote key={key} id={key} {...item} showNoteComments={this.props.showNoteComments}>{item.content}</DraggableNote>\n      );\n    }\n\n    render() {\n\n\n      const {notesDelete, movedNote, notes, connectDropTarget, board} = this.props;\n      let backgroundColor;\n\n      return connectDropTarget(\n      <div>\n        <MediaQuery query='(min-device-width: 800px)'> {/*view for web*/}\n          <div style={styles}>\n            { notes.map((note) => {\n              return this.renderNote(note, note.id);\n            }\n          )}\n\n\n        </div>\n          </MediaQuery>\n\n          <MediaQuery query='(max-device-width: 799px)'> {/*view for mobile*/}\n            <div style={{marginTop: '70px'}}>\n\n              <ol className='mobileOL'>\n              {\n              notes.map((note, index) => {\n                backgroundColor = note.color.replace(/^#*/, '#');\n                return (\n                  <li key={`noteboard_${note.id}`} className=\"mobileListItem col-xs-12\"\n                    onClick={() => { this.props.showNoteComments(note.color, note.content, note.id); }}>\n                    <div className='noteBlock col-xs-2' style={{...noteStyles, backgroundColor}} />\n                    <span className='mobileNoteContent col-xs-10'>{note.content}</span>\n                  </li>\n                );\n              })\n            }\n          </ol>\n       </div>\n        </MediaQuery>\n\n      </div>\n    );\n    }\n}\n\n  const mapStateToProps = (state, ownProps) => {\n\n    return {\n      notes: state.noteReducer.all.filter(note => {\n\n        return ownProps.board.id === note.board_id;\n      }),\n      user        : state.userReducer.loggedInUser,\n      zIndexNotes : state.noteReducer.zIndexNotes,\n      deletedNotes: state.noteReducer.deletedNotes,\n\n      board: state.board.selectedBoard\n\n    };\n\n  };\n\n  const mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({noteMover, notesDelete, participantMoveNote, socketConnect, socketEmit, clearSocketListeners, socketDisconnect, addSocketListener, addNoteToBoard, IndexToZIndex}, dispatch);\n  };\n\n  export default flow(DropTarget(NOTE, noteTarget, collect\n), connect(mapStateToProps, mapDispatchToProps))(NoteBoardContainer)\n;\n\n\n\n/** WEBPACK FOOTER **\n ** ./client/containers/NoteBoardContainer.js\n **/"],"sourceRoot":""}