{"version":3,"sources":["webpack:///./client/containers/BoardContainer.js?8288"],"names":["ReactDOM","require","noop","Clipboard","createClass","propTypes","value","PropTypes","string","isRequired","className","style","object","onCopy","func","getDefaultProps","position","overflow","clip","height","width","margin","padding","border","componentDidMount","document","addEventListener","handleKeyDown","handleKeyUp","componentWillUnmount","removeEventListener","render","props","handleCopy","e","metaKeyIsDown","ctrlKey","metaKey","textIsSelected","window","getSelection","toString","element","findDOMNode","focus","select","blur","BoardContainer","dispatch","board","notes","boardId","id","console","log","hash","name","display","mapStateToProps","state","selectedBoard","noteReducer","all","mapDispatchToProps","socketConnect","socketDisconnect","clearSocketListeners"],"mappings":"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","file":"0.893d92aee10eba50ea19.hot-update.js","sourcesContent":["import React, {Component} from 'react';\nconst ReactDOM = require('react-dom');\n\nimport store from '../store';\nimport {connect} from 'react-redux';\nimport io from 'socket.io-client';\nimport CustomDragLayerContainer from './CustomDragLayerContainer';\nimport ParticipantsContainer from './ParticipantsContainer';\nimport { socketConnect, socketDisconnect, clearSocketListeners } from '../actions/socketio';\nimport { bindActionCreators } from 'redux';\n// import Clipboard from 'react-clipboard';\n\n// localhost:3030/note?=${this.props.board.hash}\nfunction noop() {}\n\nconst Clipboard = React.createClass({\n\n  propTypes: {\n    value    : React.PropTypes.string.isRequired,\n    className: React.PropTypes.string,\n    style    : React.PropTypes.object,\n    onCopy   : React.PropTypes.func\n  },\n\n  getDefaultProps: function() {\n    return {\n      className: 'clipboard',\n      style    : {\n        position: 'fixed',\n        overflow: 'hidden',\n        clip    : 'rect(0 0 0 0)',\n        height  : 1,\n        width   : 1,\n        margin  : -1,\n        padding : 0,\n        border  : 0\n      },\n      onCopy: noop\n    };\n  },\n\n  componentDidMount: function() {\n    document.addEventListener('keydown', this.handleKeyDown, false);\n    document.addEventListener('keyup', this.handleKeyUp, false);\n  },\n\n  componentWillUnmount: function() {\n    document.removeEventListener('keydown', this.handleKeyDown, false);\n    document.removeEventListener('keyup', this.handleKeyUp, false);\n  },\n\n  render: function() {\n    return <textarea {...this.props} readOnly={true} onCopy={this.handleCopy} />;\n  },\n\n  handleCopy: function(e) {\n    this.props.onCopy(e);\n  },\n\n  handleKeyDown: function(e) {\n    const metaKeyIsDown = (e.ctrlKey || e.metaKey);\n    const textIsSelected = window.getSelection().toString();\n\n    if (!metaKeyIsDown || textIsSelected) {\n      return;\n    }\n\n    const element = ReactDOM.findDOMNode(this);\n    element.focus();\n    element.select();\n  },\n\n  handleKeyUp: function(e) {\n    const element = ReactDOM.findDOMNode(this);\n    element.blur();\n  }\n\n});\n\nclass BoardContainer extends Component {\n\n  componentWillMount() {\n    const { dispatch, board, notes} = this.props;\n    const boardId = board.id;\n\n  }\n  handleCopy(e) {\n    console.log('copied', e);\n  }\n  render() {\n    const value = `localhost:3030/note?=${this.props.board.hash}`;\n\n    return (\n      <div className=\"col-xs-12\" key={ this.props.board.id }>\n        <span className=\"text-center\">\n          <h2>{ this.props.board.name }</h2>\n          <div>\n            <p>Press Cmd + C to copy:</p>\n            <pre style={{display: 'inlineBlock'}}>{value}</pre>\n            <Clipboard value={value}\n              onCopy={this.handleCopy} />\n          </div>\n        </span>\n          <div>\n            <div className=\"screen col-xs-12\">\n              <CustomDragLayerContainer {...this.props}/>\n            </div>\n          </div>\n          <ParticipantsContainer />\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state) => ({\n  board: state.board.selectedBoard,\n  notes: state.noteReducer.all,\n  hash : state.board.selectedBoard.hash\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({socketConnect, socketDisconnect, clearSocketListeners }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);\n\n\n\n/** WEBPACK FOOTER **\n ** ./client/containers/BoardContainer.js\n **/"],"sourceRoot":""}