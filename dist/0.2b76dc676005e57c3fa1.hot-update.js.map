{"version":3,"sources":["webpack:///./client/containers/NoteBoardContainer.js?b410"],"names":["styles","height","width","position","trashStyles","top","left","noteTarget","drop","props","monitor","component","delta","getDifferenceFromInitialOffset","item","getItem","Math","round","x","y","snapToGrid","IndexToZIndex","notes","id","noteMover","collect","connector","connectDropTarget","dropTarget","isOver","NoteBoardContainer","boardUpdate","bind","participantMoveNote","socketConnect","addSocketListener","note","console","log","board_id","board","dispatch","data","key","Object","keys","coordObj","coords","Number","clearSocketListeners","socketDisconnect","deletedNotes","index","content","notesDelete","movedNote","map","renderNote","mapStateToProps","state","ownProps","noteReducer","all","filter","user","userReducer","loggedInUser","zIndexNotes","mapDispatchToProps","socketEmit","addNoteToBoard"],"mappings":"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","file":"0.2b76dc676005e57c3fa1.hot-update.js","sourcesContent":["\n  import React, { Component } from 'react';\n  import {bindActionCreators, compose} from 'redux';\n  import {DropTarget} from 'react-dnd';\n  import {connect} from 'react-redux';\n  import { browserHistory } from 'react-router';\n  import axios from 'axios';\n  import {NOTE} from '../constants';\n  import NoteWrapper from '../components/NoteWrapper';\n  import DraggableNote from '../components/DraggableNote';\n  import snapToGrid from '../components/snapToGrid';\n  import {deleteNotesFromDatabase, moveNote, participantMoveNote, addNoteToBoard, noteMover, IndexToZIndex, notesDelete} from '../actions/note';\n  import {setLoginUser} from '../actions/user';\n  import {\n    socketConnect,\n    socketEmit,\n    clearSocketListeners,\n    socketDisconnect,\n    addSocketListener\n  } from '../actions/socketio';\n  import store from '../store';\n  import flow from 'lodash/flow';\n  import isEmpty from 'lodash/isEmpty';\n  import {genShortHash} from '../utils/stringHash';\n  import TrashCan from '../components/NoteBoardTrashCan';\n\n  const styles = {\n    height  : 1000,\n    width   : 1000,\n    position: 'relative'\n  };\n\n  const trashStyles = {\n    top : 900,\n    left: 900\n  };\n\n\n  const noteTarget = {\n    drop(props, monitor, component) {\n\n      const delta = monitor.getDifferenceFromInitialOffset();\n      const item = monitor.getItem();\n      if (delta === null) {\n        return;\n      } else {\n        let left = Math.round(item.left + delta.x);\n        let top = Math.round(item.top + delta.y);\n        if (props.snapToGrid) {\n          [ left, top ] = snapToGrid(left, top);\n        }\n        props.IndexToZIndex(props.notes, item.id);\n        props.noteMover(item.id, left, top);\n      // const newdata = {[item.id]: {left, top}};\n      }\n    },\n\n\n  };\n\n\n  const collect = (connector, monitor) => {\n\n    return {\n      connectDropTarget: connector.dropTarget(),\n      isOver           : monitor.isOver()\n    };\n  };\n\n\n  class NoteBoardContainer extends Component {\n    constructor(props) {\n      super(props);\n      this.boardUpdate = this.boardUpdate.bind(this);\n      this.participantMoveNote = this.participantMoveNote.bind(this);\n\n    }\n\n    componentWillMount() {\n      this.props.socketConnect('board');\n      this.props.addSocketListener('note', this.boardUpdate);\n      this.props.addSocketListener('moveNote', this.participantMoveNote);\n\n    }\n\n\n    boardUpdate(note) {\n      console.log('boardUpdate', note);\n      if (note.board_id === this.props.board.id) {\n        store.dispatch(addNoteToBoard(note));\n      }\n    }\n\n    participantMoveNote(data) {\n      const key = Object.keys(data);\n      let left;\n      let top;\n      const coordObj = data[key];\n      for (const coords in coordObj) {\n        if (coords === 'left') {\n          left = coordObj[coords];\n        } else {\n          top = coordObj[coords];\n        }\n      }\n      store.dispatch(moveNote(Number(key[0]), left, top));\n    }\n\n\n    componentWillUnmount() {\n      this.props.clearSocketListeners();\n      this.props.socketDisconnect();\n      deleteNotesFromDatabase(this.props.deletedNotes);\n    }\n\n\n    renderNote(item, key, index) {\n\n      return (\n        <DraggableNote key={key} id={key} {...item}>{item.content}</DraggableNote>\n      );\n    }\n\n    render() {\n\n      const {notesDelete, movedNote, notes, connectDropTarget} = this.props;\n      return connectDropTarget(\n      <div style={styles}>\n        {\n          notes.map((note) => {\n            return this.renderNote(note, note.id);\n          }\n      )}\n      <div className=\"trashcan\">\n          <TrashCan style={trashStyles} notesDelete={notesDelete} notes={notes}/>\n      </div>\n\n      </div>\n    );\n    }\n}\n\n  const mapStateToProps = (state, ownProps) => {\n\n    return {\n      notes: state.noteReducer.all.filter(note => {\n        return ownProps.board.id === note.board_id;\n      }),\n      user        : state.userReducer.loggedInUser,\n      zIndexNotes : state.noteReducer.zIndexNotes,\n      deletedNotes: state.noteReducer.deletedNotes\n    };\n\n  };\n\n  const mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({noteMover, notesDelete, participantMoveNote, socketConnect, socketEmit, clearSocketListeners, socketDisconnect, addSocketListener, addNoteToBoard, IndexToZIndex}, dispatch);\n  };\n\n  export default flow(DropTarget(NOTE, noteTarget, collect\n), connect(mapStateToProps, mapDispatchToProps))(NoteBoardContainer)\n;\n\n\n\n/** WEBPACK FOOTER **\n ** ./client/containers/NoteBoardContainer.js\n **/"],"sourceRoot":""}