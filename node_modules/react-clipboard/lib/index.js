"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require("react");
var ReactDOM = require("react-dom");

function noop() {}

var Clipboard = React.createClass({
  displayName: "Clipboard",


  propTypes: {
    value: React.PropTypes.string.isRequired,
    className: React.PropTypes.string,
    style: React.PropTypes.object,
    onCopy: React.PropTypes.func
  },

  getDefaultProps: function getDefaultProps() {
    return {
      className: "clipboard",
      style: {
        position: "fixed",
        overflow: "hidden",
        clip: "rect(0 0 0 0)",
        height: 1,
        width: 1,
        margin: -1,
        padding: 0,
        border: 0
      },
      onCopy: noop
    };
  },
  componentDidMount: function componentDidMount() {
    document.addEventListener("keydown", this.handleKeyDown, false);
    document.addEventListener("keyup", this.handleKeyUp, false);
  },
  componentWillUnmount: function componentWillUnmount() {
    document.removeEventListener("keydown", this.handleKeyDown, false);
    document.removeEventListener("keyup", this.handleKeyUp, false);
  },
  render: function render() {
    return React.createElement("textarea", _extends({}, this.props, { readOnly: true, onCopy: this.handleCopy }));
  },
  handleCopy: function handleCopy(e) {
    this.props.onCopy(e);
  },
  handleKeyDown: function handleKeyDown(e) {
    var metaKeyIsDown = e.ctrlKey || e.metaKey;
    var textIsSelected = window.getSelection().toString();

    if (!metaKeyIsDown || textIsSelected) {
      return;
    }

    var element = ReactDOM.findDOMNode(this);
    element.focus();
    element.select();
  },
  handleKeyUp: function handleKeyUp(e) {
    var element = ReactDOM.findDOMNode(this);
    element.blur();
  }
});

module.exports = Clipboard;